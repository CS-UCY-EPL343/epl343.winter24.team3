import sqlite3

# > connect if db exist - create if database doesn't.
connection = sqlite3.connect('./db/epl343.db')
# > create cursor to access the db.
cursor = connection.cursor()

createUser = """CREATE TABLE IF NOT EXISTS USER
    ( 
    UID INTEGER PRIMARY KEY AUTOINCREMENT,
    USERNAME VARCHAR NOT NULL CHECK(USERNAME GLOB '[a-zA-Z0-9_]*'),
    PASS_HASHED VARCHAR NOT NULL,
    SALT BLOB NOT NULL,

    UNIQUE (USERNAME)
    )"""

createEntry = """CREATE TABLE IF NOT EXISTS ENTRY
    (
    MIN_REQUIREMENT INTEGER NULL CHECK(MIN_REQUIREMENT >= 0),
    QNT INTEGER NOT NULL DEFAULT 0 CHECK(QNT >= 0),
    SIZE INTEGER NOT NULL CHECK(SIZE >= 0),
    CATEGORY VARCHAR NULL CHECK(CATEGORY GLOB '[a-zA-Z ]*'),
    NAME VARCHAR NOT NULL CHECK(NAME GLOB '[a-zA-Z0-9 ]*'),
    SUPPLIER VARCHAR NULL CHECK(SUPPLIER GLOB '[a-zA-Z0-9 ]*'),
    PHOTO VARCHAR NULL,
    AVG_PER_WEEK REAL NULL,
    ENTRY_ID INTEGER PRIMARY KEY AUTOINCREMENT,
    UID INTEGER NOT NULL,
    UNAVAILABLE CHAR NULL CHECK(UNAVAILABLE IN ('T', 'F')),

    FOREIGN KEY (UID) REFERENCES USER(UID),
    UNIQUE (NAME, SIZE, UID, SUPPLIER)
    )"""

createLog = """CREATE TABLE IF NOT EXISTS LOG
    (
    LOG_ID INTEGER PRIMARY KEY AUTOINCREMENT,
    DATE_TIME DATETIME NOT NULL,
    QNT_DIF INTEGER NOT NULL,
    UID INTEGER NOT NULL,
    ENTRY_ID INTEGER NOT NULL,

    FOREIGN KEY (ENTRY_ID) REFERENCES ENTRY(ENTRY_ID),
    FOREIGN KEY (UID) REFERENCES USER(UID)
    )"""

createPendingTrans = """CREATE TABLE IF NOT EXISTS PENDING_TRANSACTIONS
    (
    TRANS_ID INTEGER PRIMARY KEY AUTOINCREMENT,
    UID_REQ_TRANS INT NOT NULL,
    UID_ANS_TRANS INT NOT NULL,
    ENTRY_ID INT NOT NULL, 
    QNT INT NOT NULL,

    FOREIGN KEY (UID_REQ_TRANS) REFERENCES USER(UID),
    FOREIGN KEY (UID_ANS_TRANS) REFERENCES USER(UID),
    UNIQUE (TRANS_ID, UID_REQ_TRANS, UID_ANS_TRANS)
    )""" 

createQuickAccess = """CREATE TABLE IF NOT EXISTS QUICK_ACCESS
    (
    UID INT NOT NULL,
    UID_OTHER INT NOT NULL,

    PRIMARY KEY (UID, UID_OTHER),
    FOREIGN KEY (UID) REFERENCES USER(UID),
    FOREIGN KEY (UID_OTHER) REFERENCES USER(UID)
    )"""

cursor.execute(createUser)
cursor.execute(createEntry)
cursor.execute(createLog)
cursor.execute(createPendingTrans)
cursor.execute(createQuickAccess)

connection.commit() 
connection.close()